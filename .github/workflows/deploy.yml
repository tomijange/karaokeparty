name: publish

on: [push]

jobs:
  build:
    name: Docker deployment frontend
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@master

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=karaokeparty/frontend
          VERSION=edge
          if [[ $GITHUB_REF == refs/branches/* ]]; then
            VERSION=${GITHUB_REF#refs/branches/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: docker/frontend.Dockerfile
#          push: ${{ github.event_name != 'pull_request' }}
          push: true
          tags: ${{ steps.prep.outputs.tags }}

      - name: Create SSH key
        run: |
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY }}

      - name: Setup
        run: |
          echo "$ENVIRONMENT" > .env
        env:
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

      - name: Run Deploy
        run: |
          echo "$DOCKER_HOST"
          docker-compose \
            -f docker/docker-compose.yml \
            -f docker/docker-compose.traefik.yml \
            -f docker/docker-compose.acme.yml \
            -p "karaokeparty-production" \
            up -d
        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}




